[Patch Info]
Device_Code_Version = Version1

Patch_Cpu_Core = APPLICATION

Patch_File_Address  = 0x00000000

# patch_remap table 在bin文件中的偏移地址
Patch_TBL_Address   = 0x00000400

# patch_remap table 实际的运行地址, 必须 1K 对齐
Patch_TBL_Run_Address  = 0x0014c000

# 如果这里配置为 4, 那 remap table 里只能存短跳指令, Patch_TBL_Run_Address 和 patch 函数地址间隔不能超过 1M
# 如果这里配置为 8, 1. init 时需要将 off_region 配置为 true; 2. 对 patch 函数地址则没有限制;
Table_Max_Size         = 8
Table_Reg_Size         = 8

# patch 数量 = 指令 patch 的数量(192) + 数据 patch 的数量(2)
# 注意: drivers\chips\ws63\arch\riscv\riscv31\flash_patch.h 中的 RISCV31_PATCH_CMP_REG_NUM 宏单指 指令 patch 的数量
#       main.c 中的 PATCH_NUM 宏指 指令 patch + 数据 patch 的数量
TABLE_REG_CONUT        = 194

[ROM Info]
ROM_Address        = 0x00109000
ROM_Size           = 0x00043000

[Output Info]
CMP_Bin_File        = cmp.bin
TBL_Bin_File        = tbl.bin
RW_Bin_File         = patch.bin

[Function]
####start platform patch
uapi_watchdog_enable uapi_watchdog_enable_patch
uapi_watchdog_kick uapi_watchdog_kick_patch
hal_sfc_v150_reg_write hal_sfc_v150_reg_write_patch
hal_sfc_v150_get_flash_id hal_sfc_v150_get_flash_id_patch
uapi_sfc_reg_read uapi_sfc_reg_read_patch
uapi_sfc_dma_read uapi_sfc_dma_read_patch
do_greedy_erase do_greedy_erase_patch
uapi_sfc_reg_write uapi_sfc_reg_write_patch
####end   platform patch
####start wifi patch
####end   wifi patch

####start btc patch
dm_ble_generate_access_address dm_ble_generate_access_address_patch
lm_ble_scan_recv_extended_adv lm_ble_scan_recv_extended_adv_patch
evt_task_ble_adv_set_intv evt_task_ble_adv_set_intv_patch
####end   btc patch
